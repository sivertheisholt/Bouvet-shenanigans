name: .NET Core CI

on:
  workflow_dispatch:
  push:

env:
  AZURE_WEBAPP_NAME: bouvet-shenanigans # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: "." # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: "7.x" # set this to the dot net version to use
  CI: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repo
      - uses: actions/checkout@main

      # Setup .NET Core SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm ci
        working-directory: ./Bouvet-Shenanigans.Web
      - run: cd ./Bouvet-Shenanigans.Web; npm run build;

      # Run dotnet build and publish
      - name: dotnet build and publish
        run: |
          dotnet restore
          dotnet build ./Bouvet-Shenanigans.Api/Bouvet-Shenanigans.Api.csproj --configuration Release -o ${{env.AZURE_WEBAPP_PACKAGE_PATH}}/myapp
          dotnet publish -c Release --property:PublishDir='${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'

      # Deploy to Azure Web apps
      - name: "Run Azure webapp deploy action using publish profile credentials"
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }} # Replace with your app name
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE  }} # Define secret variable in repository settings as per action documentation
          package: "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp"
          
      # Get version from API csproj
      - name: Retrieve Version from .csproj
        id: version
        run: |
          version=$(grep -oPm1 "(?<=<Version>)[^<]+" "./Bouvet-Shenanigans.Api/Bouvet-Shenanigans.Api.csproj")
          echo "Version from .csproj: $version"
          echo "project_version=$version" >> $GITHUB_OUTPUT

      # Print version number
      - name: Version number
        run: |
          version=${{ steps.version.outputs.project_version }}
          echo "Using version ${{ steps.version.outputs.project_version }} in your build and deploy process"

      # Create tag
      - name: Create Git Tag
        run: |
          TAG_NAME=v${{ steps.version.outputs.project_version }}

          git tag $TAG_NAME

          git push origin $TAG_NAME

      # Create release
      - uses: ncipollo/release-action@v1
        with:
          body: ""
          tag: v${{ steps.version.outputs.project_version }}
